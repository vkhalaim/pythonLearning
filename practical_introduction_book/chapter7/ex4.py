"""

There is a provably unbreakable cipher called a one-time pad. The way it works is you shift
each character of the message by a random amount between 1 and 26 characters, wrapping
around the alphabet if necessary. For instance, if the current character is y and the shift is 5,
then the new character is d. Each character gets its own shift, so there needs to be as many
random shifts as there are characters in the message. As an example, suppose the user enters
secret. The program should generate a random shift between 1 and 26 for each character.
Suppose the randomly generated shifts are 1, 3, 2, 10, 8, and 2. The encrypted message would
be thebmv.
    (a) Write a program that asks the user for a message and encrypts the message using the
    one-time pad. First convert the string to lowercase. Any spaces and punctuation in the
    string should be left unchanged. For example, Secret!!! becomes thebmv!!! using
    the shifts above.
    (b) Write a program to decrypt a string encrypted as above.
The reason it is called a one-time-pad is that the list of random shifts should only be used once.
It becomes easily breakable if the same random shifts are used for more than one message.
Moreover, it is only provably unbreakable if the random numbers are truly random, and the
numbers generated by randint are not truly random. For this problem, just use randint,
but for cryptographically safe random numbers, see Section 22.8.

"""
from random import randint

alphabet = "abcdefghijklmnopqrstuvwxyz"
shifts = []
# String -> String
def encrypt_pad(msg):
    """ The function which returns encrypted message with random shift. """

    msg = msg.lower()
    result = ""

    for i in range(0, len(msg)):
        if msg[i].isalpha():
            shift = randint(0, len(alphabet))
            indexOfEncryptedLetter = alphabet.index(msg[i]) + shift

            if indexOfEncryptedLetter >= len(alphabet):
                indexOfEncryptedLetter = indexOfEncryptedLetter - len(alphabet)

            result += alphabet[indexOfEncryptedLetter]
            shifts.append(shift)
            continue

        result += msg[i]
    return result
# String -> String
def decrypt_pad(enc):
    """ The function which returns decrypted message with saved random shifts from function encrypt_pad """
    result = ""
    counter_shifts = 0
    for i in range(0, len(enc)):
        if enc[i].isalpha():
            indexOfEncryptedLetter = alphabet.index(enc[i]) - shifts[counter_shifts]

            if indexOfEncryptedLetter > len(alphabet):
                indexOfEncryptedLetter = indexOfEncryptedLetter - len(alphabet)

            result += alphabet[indexOfEncryptedLetter]
            counter_shifts += 1
            continue

        result += enc[i]

    return result


# testing
message = input("Please enter your message: ")
encrypted_message = encrypt_pad(message)

print(encrypted_message)

decrypted_message = decrypt_pad(encrypted_message)

print(decrypted_message)